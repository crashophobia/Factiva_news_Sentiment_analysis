#####################################################################
#                     OPTIONS IMPLIED MOMENTS                       #
#####################################################################
rm(list=ls()) # Clean the environment 
#Load packages
library(tidyr)
library(purrr)
library(dplyr)
library(ragtop) # option pricing
library(readxl)
library(readr)
library(writexl)

##------------------ Example: Firm=AXP, Maturity = 91 days -------------------
setwd("C:/Users/Utilizador/Desktop/Thesis/OPTION IMPLIED MOMENTS/Data for moments")
data2 <- read.csv("AXP_91_data.csv", header=TRUE)
data <- data2 %>% dplyr::group_by(date, cp_flag) %>% nest() #form group by day and type (call/put)
#save(data, file="data.rda")

##--------------------- options to contract prices ----------------------------

#Computing the contracts R1,R2,R3 and R4; based on: #https://github.com/sstoeckl/IMOMBOX
#n is the nº of contract (I'm interested in the 2nd, 3rd and 4th)
momweight <- function(k,S,n){
  return(1/k^2*n*((n-1)*(log(k/S))^(n-2)-(log(k/S))^(n-1)))
}

#Calculate risk neutral prices for the first four moment contracts, i.e. the contracts that pay R1, R2, R3 and R4
Option2price <- function(kC,C,kP,P,S,rf){
  ### Do sorting (or numerical integration fails) by lowest strike price to highest
  skC <- order(kC)
  kC <- kC[skC]; C <- C[skC]
  skP <- order(kP)
  kP <- kP[skP]; P <- P[skP]
  N <- 4 #we want the first 4 contracts
  
  nPut <- which(kP<S)
  kP <- kP[nPut]
  P <- P[nPut]
  nCall <- which(kC>S)
  kC <- kC[nCall]
  C <- C[nCall]
  
  if (length(nPut>1)) {dkP <- c(kP[2]-kP[1],diff(kP))} else {dkP<-0}
  if (length(nCall>1)) {dkC <- c(kC[2]-kC[1],diff(kC))} else {dkC<-0}
  
  out<-rep(NA,N)
  
  for(N in seq(N)){
    out[N]<-sum(momweight(kP,S,N)*P*dkP)+sum(momweight(kC,S,N)*C*dkC)
    if(N==1){out[N]<-out[N]+1/rf-1}
  }
  return(out)
}

##------------------ Computing the moments -------------------
#Seq with the all (day, maturity) pairs
seg <- seq.int(1,length(data$date),2)

IV <- NA
SKEW <- NA
KURT <- NA
moments <- NA

for(i in seg){
  a <- i + 1
  inst <- NA
  inst2 <- NA
  
  #remove NA values
  data[[3]][[i]] <- na.omit(data[[3]][[i]]); data[[3]][[a]] <- na.omit(data[[3]][[a]])
  
  #Since we need at least 2 values to construct a grid, include if condition
  if ((length(data[[3]][[i]]$impl_strike)>=2) & (length(data[[3]][[a]]$impl_strike)>=2)){
    
    #Ordering by lowest strike price to highest
    k <- data[[3]][[i]]$impl_strike
    sk <- order(k)
    vol <- data[[3]][[i]]$impl_volatility
    k <- k[sk]; vol <- vol[sk]
    
    k2 <- data[[3]][[a]]$impl_strike
    sk2 <- order(k2)
    vol2 <- data[[3]][[a]]$impl_volatility
    k2 <- k2[sk2]; vol2 <- vol2[sk2]
    
    # Create the grid of strike prices needed for the trapezoid approximation
    grid <- approx(x=k, y=vol, method = "linear", n = 501, ties = "ordered")
    grid2 <- approx(x=k2, y=vol2, method = "linear", n = 501, ties = "ordered")
    
    ## input
    S = data[[3]][[i]]$prc[1] #stock price (adjusted for dividends; 𝑆* = 𝑆 − 𝑃𝑉(𝐷𝑖𝑣))
    kC = grid$x  #vector of strike prices of call options
    kP = grid2$x  #vector of strike prices of put options
    rf  = data[[3]][[i]]$rf[1]/100 #rf
    vol = grid$y #volatility
    vol2 = grid2$y #volatility 
    Ty  = data[[3]][[i]]$days[1]/365 #time until maturity
    if ((data[[2]][[i]])=="C"){callput = 1} else if ((data[[2]][[i]])=="P"){callput = -1} #callput
    if ((data[[2]][[a]])=="C"){callput2 = 1} else if ((data[[2]][[a]])=="P"){callput2 = -1} #callput
    
    #Obtaining the implied premium (BS formula), for each implied volatility
    for (n in (1:length(kC))){
      strike <- grid$x[n]
      imp_vol <- grid$y[n]
      ##Apply the BS formula
      bs <- blackscholes(callput, S, strike, rf, Ty, imp_vol) 
      inst <- rbind(inst, data.frame(date=data$date[i],days=data[[3]][[i]]$days[1],call_put=(data[[2]][[i]]),K=strike,price=bs$Price,vol=imp_vol,Spot_price=S,risk_free=rf))
    }
    
    for (m in (1:length(kP))){
      strike2 <- grid2$x[m]
      imp_vol2 <- grid2$y[m]
      ##Apply the BS formula
      bs2 <- blackscholes(callput2, S, strike2, rf, Ty, imp_vol2)
      inst2 <- rbind(inst2, data.frame(date=data$date[a],days=data[[3]][[a]]$days[1],call_put=(data[[2]][[a]]),K=strike2,price=bs2$Price,vol=imp_vol2,Spot_price=S,risk_free=rf))
    }
  } else {next}
  
  if (all(is.na(inst))==F){inst <- inst[!(is.na(inst$date)),]} #drop NA observations
  if (all(is.na(inst2))==F){inst2 <- inst2[!(is.na(inst2$date)),]}
  
  if (all(is.na(inst))==T){C<-NA} else if (all(is.na(inst))==F){C <- inst$price} #Vector of call option prices (premium)
  if (all(is.na(inst2))==T){P<-NA} else if (all(is.na(inst2))==F){P <- inst2$price} #Vector of put option prices (premium)
  
  contracts <- Option2price(kC,C,kP,P,S,rf)
  
  if (all(is.na(contracts))==F){
  #Computing the moments of an asset's risk neutral distribution from put and call options
  IV <- contracts[2]
  mu <- exp(rf*Ty)-1-(exp(rf*Ty)/2)*contracts[2]-(exp(rf*Ty)/6)*contracts[3]-(exp(rf*Ty)/24)*(contracts[4])
  SKEW <- ((exp(rf*Ty))*(contracts[3])-3*(mu)*(exp(rf*Ty))*(contracts[2])+2*(mu^3))/(((exp(rf*Ty))*(contracts[2])-(mu^2))^(3/2))
  KURT <- (exp(rf*Ty)*contracts[4]-4*mu*exp(rf*Ty)*contracts[3]+6*exp(rf*Ty)*(mu^2)*contracts[2]-3*(mu^4))/((exp(rf*Ty)*contracts[2]-(mu)^2)^(2))
  
  df <- data.frame(firm=data[[3]][[i]]$ticker[1],date=(data$date[i]),days=data[[3]][[i]]$days[1],Volatility=IV,Skewness=SKEW, Kurtosis=KURT)
  
  moments <- rbind(moments, df)
  moments <- moments[!(is.na(moments$date)),] #drop observation if NA
  }
  
}

AXP_91_moments <- moments
setwd("C:/Users/Utilizador/Desktop/Thesis/OPTION IMPLIED MOMENTS/Implied Moments")
save(AXP_91_moments, file="AXP_91_moments.rda")
write_delim(AXP_91_moments, "AXP_91_moments.csv",col_names = TRUE,delim = ",") #export the moments data
